Problem E. LoveZx与期末考试

[Solution]
显然A和B很大，我们需要用字符串读入两个数。

假如LoveZx和Zx的成绩位数不同，那么两者之间的大小关系是不会改变的，这种情况可以提前判断。
于是接下来的讨论都在位数相同的前提下进行：

很自然的，我们从高到低分析每一位：
设当前位Zx的值为up，LoveZx的值为down，那么up和down的大小关系有三种：

一、up < down，出现这种情况说明Zx的分数已经小于LoveZx的分数了，此时LoveZx不需再作任何改动。
二、up > down，这时LoveZx必须对他的分数作修改，也就是从后面还没有选择的位置中挑一个数，放到这个位置来，同时其它数字右移，显然我们希望这个数字越大越好。
这里有三种可能：
1.可以挑选的最大数字比up大，这时LoveZx只要把这个数字移过来，任务就完成了，不需再做任何改动。
2.可以挑选的最大数字比up小，这时说明无解，LoveZx的分数已经不可能超过Zx了。
3.可以挑选的最大数字等于up，这时LoveZx需要把这个数字移过来，但是任务还没有完成，我们还需要继续分析后面的位置。注意到这种情况下，选择尽可能靠后的数字更优。
三、up == down，这时如果后面有大于up的数字以供挑选，把那个数字移过来将成为一组合法的解，虽然我们无法保证这个解是最优的，但是可以用来更新答案。
我们也可以选择不做任何改动，继续分析后面的位置。

以上是分析的思路，下面我们讨论具体的实现：

我们用一个循环，从高到低枚举每一位，同时维护一个变量tot，代表当前进行了几次移位操作，一个变量ans，代表最后的答案。

对于每一位：
up < down: 直接跳出循环
up > down： 
如果可以挑选的最大数字比up大，tot加一，用tot更新ans，跳出循环。
如果可以挑选的最大数字比up小，直接跳出循环。
如果可以挑选的最大数字等于up，选在最靠后的一个数字，移动到前面来（这里移动不能直接模拟，会超时，稍后讨论怎样移动），tot加一，继续下一次循环。

up == down:
如果后面有大于up的数字，使用(tot+1)更新ans，但是并不修改tot的值，因为这只是一种可能性。
继续下一次循环。

最后，如果ans从未被更新，说明无解，否则输出ans。

现在我们讨论怎样快速定位可以挑选的最大数字，同时讨论怎样快速移动这个数字。

关于这个问题，出题人本身写了两份解题报告，在附件中给出，大家可以参考。下面列出第二种做法：

令Zx的成绩为字符串A，LoveZx的成绩为字符串B，我们可以设一个变量cnt指向当前B中与A[i]比较的那一位，同时统计出B[cnt]之后还有每一位数（0，1，2，3，……，9）还各有几个counts[0], counts[1],…. counts[9],。如果遇到需要移动的情况，就把需要移动的数的数目减去即可。这样就可以避免模拟的情况出现。

[Others]
这道题目涉及到的地方很多，对于完全初学毫无基础的新人来说，可以先部分理解这道题目，比如，如果题目的规模是A, B <= 10^1000,这时直接模拟移位是可行的，那么之前的分析过程能否理解？至于后面的部分，没有必要拘泥于标程的写法。

另外，由于我们提供了标程，大家也可以自己生成一些小数据，分别将自己的程序和标程运行这些数据，通过结果的比较找到自己的错误。
