    题目很有意思――贪吃蛇几步能吃到苹果。
    肯定是用bfs的了，不过如何保存状态呢？每节都存一个坐标需要（15*15）^9的空间，肯定是行不通的。注意到除了第一节身子，每一节身子相对于上一节都只有四个位置，可以用两bit保存相对位置，这样就只需要一个数就能保存蛇身形状了，当然可能的状态数还是原来那么多，不过用这样用set就不会MLE了。
    vis[MAXN][MAXN]是一组set容器vis[x][y]保存当前已经得到的蛇头在(x,y)的形状，这样就能用vis[nn.x][nn.y].count(nm)来判断这个位置这种形状有没访问过。
    如果贪吃蛇的长度>3并且下一步要走到自己的尾部，是合法的，因此bfs染色时没必要染最后一节。我每次bfs都把hash值转为9*2的数组再操作，或许直接对hash值操作会更快吧。
    时间复杂度依然是O(N*M)。